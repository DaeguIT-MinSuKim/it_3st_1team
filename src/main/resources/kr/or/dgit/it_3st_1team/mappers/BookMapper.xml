<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.dgit.it_3st_1team.dao.BookDao">
	<!-- 모두 보기  -->
	<resultMap type="Book" id="BookResult">
		<id property="bkCode" column="bkcode"/>
		<result property="isbn" column="isbn"/>
		<result property="rentable" column="rentable"/>
		<result property="bkname" column="bkname"/>
		<result property="author" column="author"/>
		<result property="publish" column="publish"/>
		<result property="pubyear" column="pubyear"/>
		<result property="info" column="info"/>
	</resultMap>
	
	<resultMap type="Book" id="BookWithTakeinoutResult" extends="BookResult">
		<result property="take.inout_no" column="inout_no"/>
		<result property="take.user.code" column="code" />
		<result property="take.book.bkCode" column="bkcode" />
		<result property="take.rentday" column="ti"/>
		<result property="take.returnday" column="te"/>
		<result property="location.loca_num" column="loca_num"/>
		<!-- <result property="location.loca_section" column="loca_section"/> -->
	</resultMap>
	
	<!-- 분류별 책 검색 -->
	
	<sql id="selectCategorySql">
		select b.bkcode, b.isbn, b.bkname, b.author, b.publish, b.pubyear, t.rentday as ti, t.returnday as te, loca_num
		from book as b left outer join takeinout as t on b.bkcode = t.bkcode
	</sql>
	
	<sql id="whereCategorySql">
	</sql>
	<sql id="whereSql">
		<where>
			<if test="location.loca_num != null">
				loca_num like #{location.loca_num}
			</if>
			<if test="bkname != null">
				and bkname like #{bkname}
			</if>
			<if test="rentable != null">
				and rentable = #{rentable}
			</if>
		</where>
	</sql>
	<sql id="whereDetailSql">
		<where>
			<if test="bkCode != null">
				bkCode #{bkCode}
			</if>
			<if test="bkname != null">
				and bkname = #{bkname}
			</if>
			<if test="author != null">
				and author = #{author}
			</if>
			<if test="publish != null">
				and publish = #{publish}
			</if>
			<if test="pubyear > 0">
				and pubyear = #{pubyear}
			</if>
			<if test="isbn != null">
				and isbn = #{isbn}
			</if>
		</where>
	</sql>
	
	<select id="selectBookStartAll" resultType="Book">
		select bkcode, isbn, rentable, bkname, author, publish, pubyear, info, loca_num, Count(*) from book 
		GROUP BY isbn HAVING COUNT(isbn) > 0 order by bkcode desc
	</select>
		
	<select id="selectBookAll" parameterType="Book" resultMap="BookWithTakeinoutResult">
		select bkcode, isbn, rentable, bkname, author, publish, pubyear, info, loca_num from book 
		<include refid="whereSql"/>
		GROUP BY isbn HAVING COUNT(isbn) > 0 order by bkname asc
	</select>
	
	<!-- 보유수 찾기 -->
	<select id="selectExistNum" parameterType="String" resultType="int">
		select count(*) as '보유수' from book where isbn = #{isbn}
	</select>
	
	<!-- 도서 상세검색 -->
	<select id="selectBookDetail" parameterType="Book" resultMap="BookResult">
		select bkCode, isbn, rentable, bkname, author, publish, pubyear from book
		<include refid="whereDetailSql"/>
		GROUP BY isbn HAVING COUNT(isbn) > 0 order by bkname;
	</select>
	
	<!-- isbn 찾기 -->
	<select id="selectIsbn" parameterType="Book" resultType="String">
		select isbn from book 
		<include refid="whereDetailSql"/>
		GROUP BY isbn HAVING COUNT(isbn) > 0;
	</select>
	
	<!-- isbn으로 도서찾기 -->
	<select id="selectByIsbn" parameterType="String" resultType="Book">
		select bkcode, isbn, rentable, bkname, author, publish, pubyear, info, loca_num from book where isbn = #{isbn}
		GROUP BY isbn HAVING COUNT(isbn) > 0;
	</select>

</mapper>



